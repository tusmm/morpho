//surfaces.morpho
import functionals
import meshtools
import optimize
import plot
import color
import povray
/*
Surface class, parent class that changes the surface the droplet
is sitting on. 
*/
class Surface {
    /*
    Gets the set Scalar Potential to apply on the bottom surface of an 
    experiment. 
    */
    getPinningFunctional(){
        return ScalarPotential(self.getEnergy,self.getGradE)
    }
    /*
    Gets the name of the experiment. 
    */
    getTitle() { return "${self.name}"}
}
/*
Planar surface class, contains implementation of a flat surface.
*/
class PlanarSurface is Surface{
    /*
    initializes a Planar Surface
        @param  n   the normal of the surface
        @param  point   the center point of the surface
        @precondition   the droplet is centered at [0,0,0]
    */
    init(n = nil, point = nil) {
        if (isnil(n)) self.normal = Matrix([0,0,1])
        else self.normal = n

        if (isnil(point)) self.point = Matrix([0,0,-0.5])
        else self.point = point

        self.name = "Plane"
    }
    /*
     get the scalar potential at a point.
     returns 0 if the point is on the surface, other wise some other int will be returned.
        @param x, y, z: coordinates of the point
        @return scalar: scalar potential at the point (x,y,z)
     */
    getEnergy(x,y,z) {return self.normal.inner(Matrix([x,y,z])-self.point)}
    /*
     get the gradient of the scalar potential at a point.
     returns 0 if the point is on the surface, other wise some other int will be returned.
        @param x, y, z: coordinates of the point
        @return scalar: scalar potential at the point (x,y,z)
     */
    getGradE(x,y,z) {return self.normal}

}
/*
CylindricalSurface class, creates a cylindrical surface for the droplet to sit on
*/
class CylendricalSurface is Surface {
    /*
    initlializes a Cylindrical Surface
        @param  r   the radius of the cylinder
        @param  top the top point of the cylinder
        @precondition   the droplet is centered at [0,0,0]
    */
    init(r, top){
        // the radius of the cylinder
        self.r = r
        // the center coordinate of the cylinder
        self.center = Matrix([0,0,top-r])
    }
    /*
     get the scalar potential at a point.
     returns 0 if the point is on the surface, other wise some other int will be returned.
        @param x, y, z: coordinates of the point
        @return scalar: scalar potential at the point (x,y,z)
     */
    getEnergy(x,y,z) { return y^2+(z-self.center[2])^2-self.r^2}
    /*
     get the gradient of the scalar potential at a point.
     returns 0 if the point is on the surface, other wise some other int will be returned.
        @param x, y, z: coordinates of the point
        @return scalar: scalar potential at the point (x,y,z)
     */
    getGradE(x,y,z) { return Matrix([0,2*y,2*(z-self.center[2])])}
    /*
    Gets the title of the Surface
        @return the title of the sphere surface and its radius
    */
    getTitle(){return "Cylender r = ${self.r}"}

}
/*
SphericalSurface class, creates a spherical surface for the droplet to sit on
*/
class SphericalSurface is Surface {
    /*
    Initlializes a Spherical Surface
        @param  r   the radius of the sphere
        @param  center the center point of the sphere
        @precondition   the droplet is centered at [0,0,0]
    */
    init(r,center){
        // the radius of the sphere
        self.r = r
        // the center coordinate of the sphere
        self.center = center
    }
    /*
     get the gradient of the scalar potential at a point.
     returns 0 if the point is on the surface, other wise some other int will be returned.
        @param x, y, z: coordinates of the point
        @return scalar: scalar potential at the point (x,y,z)
     */
    getEnergy(x,y,z) { return sqrt((x-self.center[0])^2+(y-self.center[1])^2 +(z-self.center[2])^2-self.r^2) }
    /*
     get the gradient of the scalar potential at a point.
     returns 0 if the point is on the surface, other wise some other int will be returned.
        @param x, y, z: coordinates of the point
        @return scalar: scalar potential at the point (x,y,z)
     */
    getGradE(x,y,z) { return Matrix([2*x,2*y,2*z])}
    /*
    Gets the title of the Surface
        @return the title of the sphere surface and its radius
    */
    getTitle(){return "Sphere r = ${self.r}"}

}

/*
library class, contains all the meshes can be used experiments
*/
class MeshLibrary{
    /*
    generate a mesh of a cube 
    TODO: **NOTE THATE THE PARAMETERS ARE NOT IMPLEMENTED YET**
        @param length: length of a side of the cube
        @param center: center of the cube
    */
    cube(length, center) {
        var cube = PolyhedronMesh(
            [[-0.5,-0.5,-0.5],
            [-0.5,0.5,-0.5],
            [0.5,-0.5,-0.5],
            [0.5,0.5,-0.5],
            [-0.5,-0.5,0.5],
            [-0.5,0.5,0.5],
            [0.5,-0.5,0.5],
            [0.5,0.5,0.5]],
            [
            [0,1,3,2],
            [0,1,5,4],
            [2,3,7,6],
            [1,3,7,5],
            [0,2,6,4],
            [4,5,7,6]])
        cube.addgrade(1)
        cube.addgrade(2)
        return cube
    }
    /*
    creates a Planar Surface mesh to be display along with a PlanarSurface experiment
        @return a planarSurface
    */
    planarSurface() {
        var planarSurface = PolyhedronMesh([[-2.5,2.5,-0.5],[2.5,2.5,-0.5],[-2.5,-2.5,-0.5],[2.5,-2.5,-0.5],
                        [-2.5,2.5,-1],[2.5,2.5,-1],[-2.5,-2.5,-1],[2.5,-2.5,-1]],

                        [[0,1,3,2], [0,1,5,4], [0,2,6,4], [7,3,2,6],
                        [1,3,7,5], [4,6,7,5]])

        return planarSurface
    }
}
/*
Minimizer is a class that can be used to minimize an experiment.
It can customize the minimization process by providing a list of steps to be performed.
*/
class Minimizer {
    /*
    The constructor takes an experiment class.
        @param experiment: the experiment class to be minimized
    */
    init(experiment){
        self.experiment = experiment
    }
    /*
    The function that performs the minimization.
    It loops through all the steps in the list of steps and performs them.
        @param steps: a list of steps to be performed.
    */
    go(procedure) {
        for (step in procedure){
            if (step[0]=="relax") {
                    print "relaxing ${step[1]}" 
                    self.experiment.getOpt().relax(step[1])
                    // decrease stepsize, you may want to change 1.4 depending on the steps of optimization
                    self.experiment.getOpt().stepsize = self.experiment.getOpt().stepsize / 1.4
            } else if (step[0]=="refine") {
                    print("refining")
                    self.refine()
                    // self.experiment.show() // uncomment this line to see the refinement for debugging
            } else if (step[0] == "regularize") {
                    print("regularizing")
                    self.experiment.getRegularizer().linesearch(step[1])
                    self.experiment.getRegularizer().stepsize = self.experiment.getRegularizer().stepsize / 1.4
                    equiangulate(self.experiment.getMesh())
            }
        }
    }
    /*
    The function that performs the refinement.
    */
    refine(){
        var mr=MeshRefiner([self.experiment.getMesh(), self.experiment.getSelections()])
        var refmap=mr.refine()
        self.experiment.updateFromRefmap(refmap)
    }
}

/*
WettingExperiment is a class that can be used to perform a Wetting experiment.
Here is where the formulation of the problem is defined.
*/
class WettingExperiment {
    /*
    The constructor takes a mesh, a list of selections, a list of surfaces, and a list of steps.
        @param sigma: Coefficient of the surface tension energy
        @param deltaSigma: coefficient of the surface adhesion energy
        @param density: density of the wetting fluid
        @param gravity: gravity acceleration 
        @param surface: 
    */
    init(sigma, deltaSigma, density, gravity, surface) {
        self.sigma = sigma
        self.deltaSigma = deltaSigma
        self.surface = surface
        self.rho = density
        self.g = gravity

        var myLibrary = MeshLibrary()
        self.mesh = myLibrary.cube(1,Matrix([0,0,0])) // makes a cube with side length one cenered at 0,0,0
        
        self.minimizationProcedure = [["relax",10000],["refine"],["relax",1000],["refine"],["relax",1000]]

    }
    /*
    The method finds the bottom selection of the mesh.
    */
    createSelection() {
        var sel = Selection(self.mesh,fn(x,y,z) abs(self.surface.getEnergy(x,y,z))<self.bottomTolerence)
        sel.addgrade(1)
        sel.addgrade(2)
        return sel
    }
    /*
    The method declare and initialize the optimization problem.
    */
    setupProblem(){
        self.problem = OptimizationProblem(self.mesh)
        self.bottomTolerence = 0.001
        self.bottomBound = self.createSelection()
        //Air water interface
        self.problem.addenergy(Area(),prefactor = self.sigma)
        //Water Surface Interface
        self.problem.addenergy(Area(),selection = self.bottomBound,prefactor = (self.deltaSigma-self.sigma))
        //pin the boundry to the surface
        self.problem.addlocalconstraint(self.surface.getPinningFunctional(),selection = self.bottomBound)
        //volume constraint
        self.problem.addconstraint(VolumeEnclosed())
        //create the shape optizmizer
        self.opt = ShapeOptimizer(self.problem,self.mesh)
        self.opt.stepsize = 0.01
        self.opt.quiet = true

        var gravitational_potential = AreaIntegral(fn(x) abs(Matrix([0,0,1]).inner(normal())) * (((x[2]+0.5)^2/2)))
        self.problem.addenergy(gravitational_potential, prefactor=self.rho*self.g * 0) // multiplying by 0 because gravity can be neglected due to bond number

        self.regproblem = OptimizationProblem(self.mesh)
        self.regproblem.addenergy(EquiElement())
        self.regproblem.addlocalconstraint(self.surface.getPinningFunctional(),selection = self.bottomBound)
        self.regproblem.addconstraint(VolumeEnclosed())
        self.ropt = ShapeOptimizer(self.regproblem,self.mesh)
        self.ropt.quiet = true
    }
    /*
    perform minimization for the wetting experiment.
    */
    minimize(){
        self.myMinimizer = Minimizer(self)
        self.myMinimizer.go(self.minimizationProcedure)
    }
    /*
    get the mesh of the experiment.
        @return mesh: the mesh of the experiment
    */
    getMesh(){
        return self.mesh
    }
    /*
    get the current bottom bound selections of the experiment.
        @return Selection: self.bottomBound of the experiment
    */
    getSelections() {
        return self.bottomBound
    }
    /*
    update the experiment from the refmap. 
    use this function to update the mesh, bottom bound selections, and the bottom Tolerance.
        @param refmap: the refmap to update the mesh
    */
    updateFromRefmap(refmap) {
        self.bottomTolerence = self.bottomTolerence/2
        self.mesh = refmap[self.mesh]
        var newbnd=self.createSelection()
        refmap[self.bottomBound]=newbnd

        // Tell any other objects that refer to the mesh, fields or selections to update their references using refmap
        for (el in [self.problem, self.opt]) el.update(refmap) // Update the problem
        for (el in [self.regproblem, self.ropt]) el.update(refmap) // Update the problem
        self.bottomBound = refmap[self.bottomBound]
    }
    /*
    get the current shape optimizer of the experiment.
        @return ShapeOptimizer: self.opt of the experiment
    */
    getOpt(){
        return self.opt
    }
    /*
    get the current regularizer of the experiment.
        @return ShapeOptimizer: self.ropt of the experiment
    */
    getRegularizer(){
        return self.ropt
    }
    /*
    Show the current mesh of the experiment.
        @param title: String of the title of the graphic window
        @param highlight: Boolean wheather the selection to highlight the bound or not
        @param bound: Selection bound to highlight in the mesh
        @param returning: Boolean wheather the graphic window is returning from this method or not
    */
    show(title=nil, highlightBound=true, bound=nil, returning=false) {
        var graphic
        // if high light bound is true, we highlight the bottom bound by default. highl light specified other wise
        if (highlightBound) {
            if (!bound) {bound = self.getSelections()}
            graphic = plotselection(self.getMesh(), bound, grade=[0,1,2])
            // graphic = plotselection(self.getMesh(), bound, grade=[0,1,2])
        }
        else {
            graphic = plotmesh(self.getMesh(), grade=[0,1,2])
        }
        // show the graphic or return
        if (returning)
            return graphic

        var surface = PolyhedronMesh([[-2.5,2.5,-0.5],[2.5,2.5,-0.5],[-2.5,-2.5,-0.5],[2.5,-2.5,-0.5]],[[0,2,3,1]])
        var graphic2 = plotmesh(surface, grade=[2])
        graphic.background = White
        graphic2.background = White
        var g = graphic + graphic2

        // if no custom title is passed in we show all the param as title
        if (!title) {
            g.title = self.getTitle()
        }
        else { 
            g.title = title
        }
        Show(g)
    }
    /*
    Gets the title of the Surface
        @return the title of a graphic window
    */
    getTitle() {
        return "sigma=${self.sigma}; deltaSigma=${self.deltaSigma};" + self.surface.getTitle()
    }

    /*
    PRIVATE METHOD: gets the cross product
        @param a: Matrix    // Matrix A
        @param b: Matrix    // Matrix B
        @return cross(): function // returns a packed function of matrix
    */
    _getCross(a, b) {
        fn cross(a, b) {
            return Matrix([ a[1]*b[2]-a[2]*b[1],
                            a[2]*b[0]-a[0]*b[2],
                            a[0]*b[1]-a[1]*b[0] ])
        }
        return cross(a, b)
    }

    /*
    A method that calculates and return the contact angle between the bottom and the face of
    the bottom bound lines.
        @return contactAngle: Double        // the contact angle between surface and the droplet
    */
    getContactAngle() {

        var bndLines = self.bottomBound.idlistforgrade(1)
        var boundFaces = self.bottomBound.idlistforgrade(2)
        var boundVertices = self.bottomBound.idlistforgrade(0)
        var lineToFace = self.mesh.connectivitymatrix(2,1)
        var faceToVertex = self.mesh.connectivitymatrix(0,2)
        var contactangle = 0
        var contactFaces = []
        var contactAngles = []
        for (line in bndLines) { // for each line in the boundary
            var faces = lineToFace.rowindices(line) // find the face it is attached to
            for (face in faces) {
                if (!boundFaces.ismember(face) && !contactFaces.ismember(face)) {
                    contactFaces.append(face)
                }
            }
        }

        for (face in contactFaces) {
            var vertexNum = faceToVertex.rowindices(face) // find the vertices on that face
            var pTop
            var pSurface = []
            for (vertex in vertexNum) {
                if (boundVertices.ismember(vertex)) { 
                    pSurface.append(vertex)
                }
                else {
                    pTop = vertex
                }
            } 
            var pMid = (1/2)*(self.mesh.vertexposition(pSurface[0]) + self.mesh.vertexposition(pSurface[1]))
            var vFaceTangent = self.mesh.vertexposition(pTop) - pMid
            var vRad = Matrix([0, 0, 1])
            var vedge = (self.mesh.vertexposition(pSurface[0]) - self.mesh.vertexposition(pSurface[1]))
            var vSurfaceTangent = self._getCross(vedge, vRad)
            var vContactRadius = pMid - Matrix([0, 0, -0.5]) 
            if (vSurfaceTangent.inner(vContactRadius) < 0) {
                vSurfaceTangent = -vSurfaceTangent
            }
            var contactRadian = Pi - acos(vFaceTangent.inner(vSurfaceTangent)/(vFaceTangent.norm()*vSurfaceTangent.norm()))
            var contactDegree = contactRadian/Pi*180
            contactAngles.append(contactDegree)
            contactangle += contactDegree/contactFaces.count()
        }
        return [contactAngles, contactangle]
      }

}

/*
ExperimentManager class, holds all the experiments and their modifications
in one class. 
*/
class ExpermentManager {
    exp1() {
        var myDroplet = WettingExperiment(1,0.5,PlanarSurface())
        myDroplet.setupProblem()
        myDroplet.show(highlightBound = true)
        myDroplet.minimize()
        myDroplet.show(highlightBound = true)
    }
    exp2() {
        var myDroplet = WettingExperiment(0.72,0.5,CylendricalSurface(1,-0.5))
        myDroplet.minimizationProcedure = [["relax",500],["refine"],
                                                ["relax",400],["refine"],
                                                ["relax",300],["refine"],
                                                ["relax",10]]
        myDroplet.setupProblem()
        myDroplet.show(highlightBound = true)
        myDroplet.minimize()
        myDroplet.show(highlightBound = true)
    }
    exp3() {
        /*
        var myDroplet = WettingExperiment(0.72, 0, PlanarSurface()) // control ~ 90 degrees
        var myDroplet = WettingExperiment(0.72, -0.2, PlanarSurface()) // glass ~ 50 degrees
        var myDroplet = WettingExperiment(0.72,-0.095,PlanarSurface()) // p1 ~ 82.6 degrees
        var myDroplet = WettingExperiment(0.72, -0.0195, PlanarSurface()) // p2 ~ 88.8 degrees
        var myDroplet = WettingExperiment(0.72, -0.056, PlanarSurface()) // p2 pos ~ 85.94 degrees
        var myDroplet = WettingExperiment(0.05, 0.205, PlanarSurface()) // oil degrees
        */
        var myDroplet = WettingExperiment(0.72, 0.205, 0.01, 45.4876, PlanarSurface()) // p2 neg ~ 105.72 degrees


        // defines the optimization routine 
        myDroplet.minimizationProcedure = [["relax",1000],["refine"],
                                            ["relax",2000],["refine"],
                                            ["relax",200],["refine"],
                                            ["relax",100], ["regularize", 3]]
        myDroplet.setupProblem()
        myDroplet.minimize()
        myDroplet.show(highlightBound = true)

        var angle = myDroplet.getContactAngle()
        print angle[0]
        print angle[1]
    }
}

var myExp = ExpermentManager()
myExp.exp3()